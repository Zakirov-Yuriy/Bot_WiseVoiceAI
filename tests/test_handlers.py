import pytest
import pytest_asyncio
from unittest.mock import AsyncMock, patch

from aiogram import Bot
from aiogram.client.default import DefaultBotProperties
from aiogram.types import Message, User, Chat

from src.handlers import start_handler
from src import ui # Import ui to mock its functions

@pytest_asyncio.fixture
async def bot():
    """A mocked bot instance."""
    # This fixture is not strictly needed for this test anymore,
    # but it's good practice to have it for other tests.
    return Bot(
        token="1234567890:ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijk",
        default=DefaultBotProperties(parse_mode="HTML")
    )

@pytest.mark.asyncio
@patch('src.handlers.ui.create_menu_keyboard')
@patch('aiogram.types.Message.answer', new_callable=AsyncMock)
async def test_start_handler(mock_answer, mock_create_keyboard):
    """Test the /start command handler by mocking message.answer."""
    mock_create_keyboard.return_value = None # We don't care about the keyboard in this test

    chat = Chat(id=123, type="private")
    user = User(id=123, is_bot=False, first_name="Test")
    message = Message(
        message_id=1,
        date=1672531200,
        chat=chat,
        from_user=user,
        text="/start"
    )

    await start_handler(message)

    # The expected text from the handler
    expected_text = (
        "üéâ *–ü—Ä–∏–≤–µ—Ç!*\n\n"
        "–£ –≤–∞—Å –µ—Å—Ç—å *2 –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏* –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–µ—Ä–≤–∏—Å.\n\n"
        "‚ö°Ô∏è –ï—Å–ª–∏ –≤–∞—à —Ñ–∞–π–ª –≤–µ—Å–∏—Ç –±–æ–ª—å—à–µ *20 –ú–ë* ‚Äî –∑–∞–≥—Ä—É–∑–∏—Ç–µ –µ–≥–æ –≤ –æ–¥–Ω–æ –∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –æ–±–ª–∞—á–Ω—ã—Ö —Ö—Ä–∞–Ω–∏–ª–∏—â –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É:\n\n"
        "‚Ä¢ [Google Drive](https://drive.google.com/)\n"
        "‚Ä¢ [Dropbox](https://www.dropbox.com/)\n"
        "‚Ä¢ [OneDrive](https://onedrive.live.com/)\n\n"
        "üëâ –í–∞–∂–Ω–æ:\n"
        "‚Ä¢ –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å *–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –≤—Å–µ—Ö*.\n"
        "‚Ä¢ –†–∞–∑–º–µ—Ä –Ω–µ –±–æ–ª—å—à–µ *5 –ì–ë*.\n\n"
        "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É, –∏ —è –≤—Å–µ —Å–¥–µ–ª–∞—é –∑–∞ –≤–∞—Å üôå"
    )

    # Assert that the mocked 'answer' method was called once
    mock_answer.assert_called_once()
    
    # Get the arguments from the mock call
    call_args = mock_answer.call_args
    
    # Assert the text and parse_mode
    assert call_args.args[0] == expected_text
    assert call_args.kwargs['parse_mode'] == 'Markdown'
