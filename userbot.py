import asyncio
import logging
import os
import tempfile
import subprocess
from getpass import getpass
from PIL import Image, ImageDraw, ImageFont
import io
import yt_dlp
import httpx
import uuid
import time
import json
import requests
from telethon import TelegramClient, events
from telethon.errors import FloodWaitError
from telethon.tl.types import DocumentAttributeFilename
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.lib.pagesizes import A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
from reportlab.lib.styles import getSampleStyleSheet
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_API_ID = os.getenv('TELEGRAM_API_ID')
TELEGRAM_API_HASH = os.getenv('TELEGRAM_API_HASH')
TELEGRAM_SESSION_NAME = os.getenv('TELEGRAM_SESSION_NAME', 'userbot')
ASSEMBLYAI_API_KEY = os.getenv('ASSEMBLYAI_API_KEY')
OPENROUTER_API_KEY = os.getenv('OPENROUTER_API_KEY')
FFMPEG_DIR = os.getenv('FFMPEG_PATH', r"D:\Programming\ffmpeg-7.1.1-essentials_build\bin")
FONT_PATH = os.getenv('FONT_PATH', r"C:\Users\zakco\PycharmProjects\WiseVoiceAI\DejaVuSans.ttf")
CUSTOM_THUMBNAIL_PATH = os.getenv('CUSTOM_THUMBNAIL_PATH')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not all([TELEGRAM_API_ID, TELEGRAM_API_HASH, ASSEMBLYAI_API_KEY, OPENROUTER_API_KEY]):
    raise ValueError("–ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

ASSEMBLYAI_BASE_URL = "https://api.assemblyai.com/v2"
HEADERS = {"authorization": ASSEMBLYAI_API_KEY}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
SEGMENT_DURATION = 60  # seconds
MESSAGE_CHUNK_SIZE = 4000  # characters
API_TIMEOUT = 300  # seconds

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ FFMPEG –≤ PATH
os.environ["PATH"] += os.pathsep + FFMPEG_DIR

# –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
locales = {
    'ru': {
        'welcome': "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏.",
        'downloading_video': "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ... {bar} {percent}",
        'processing_audio': "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ... {bar} {percent}%",
        'uploading_file': "–ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏...",
        'no_speech': "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å –≤ –∞—É–¥–∏–æ",
        'error': "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {error}",
        'done': "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
        'caption_with_speakers': "–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ–º —Å–ø–∏–∫–µ—Ä–æ–≤",
        'caption_plain': "–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è (—Ç–µ–∫—Å—Ç –±–µ–∑ —Å–ø–∏–∫–µ—Ä–æ–≤)",
        'invalid_link': "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ YouTube",
        'unsupported_format': "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞",
        'try_again': "–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å—Å—ã–ª–∫–∏ –∏–ª–∏ —Ñ–∞–π–ª—ã –ø—Ä—è–º–æ —Å—é–¥–∞ ‚¨áÔ∏è ‚Äî –∏ –±–æ—Ç —Å–¥–µ–ª–∞–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é –∑–∞ –≤–∞—Å",
        'timeout_error': "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏",
        'telegram_timeout': "–¢–∞–π–º–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram",
    },
    'en': {
        'welcome': "Hi! Send me an audio file or YouTube link for transcription.",
        'downloading_video': "Downloading video... {bar} {percent}",
        'processing_audio': "Processing audio... {bar} {percent}%",
        'uploading_file': "Uploading file for processing...",
        'no_speech': "No speech detected in the audio",
        'error': "An error occurred: {error}",
        'done': "Processing complete!",
        'caption_with_speakers': "Transcript with speaker identification",
        'caption_plain': "Transcript (plain text)",
        'invalid_link': "Please provide a valid YouTube link",
        'unsupported_format': "Unsupported file format",
        'try_again': "Send links or files here ‚¨áÔ∏è and the bot will transcribe them for you",
        'timeout_error': "Processing timeout exceeded",
        'telegram_timeout': "Telegram connection timeout",
    }
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —à—Ä–∏—Ñ—Ç–∞ –¥–ª—è PDF
try:
    pdfmetrics.registerFont(TTFont("DejaVu", FONT_PATH))
except Exception as e:
    logger.error(f"Failed to register font: {e}")
    pdfmetrics.registerFont(TTFont("Helvetica", "Helvetica"))


class ProgressManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º"""

    def __init__(self):
        self.last_update_times = {}
        self.last_progress_values = {}  # –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        self.min_update_interval = 3.0  # –£–º–µ–Ω—å—à–∏–ª –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ 3 —Å–µ–∫—É–Ω–¥
        self.min_progress_change = 0.05  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

    async def update_progress(self, progress, message, lang: str = 'ru'):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º"""
        try:
            message_id = message.id

            # –ï—Å–ª–∏ progress - —Å—Ç—Ä–æ–∫–∞, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–∞–∑—É (–¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤)
            if isinstance(progress, str):
                await message.edit(progress)
                self.last_update_times[message_id] = time.time()
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            current_time = time.time()
            last_update = self.last_update_times.get(message_id, 0)
            last_progress = self.last_progress_values.get(message_id, -1)

            # –ù–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ –∏–ª–∏ –µ—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ
            if (current_time - last_update < self.min_update_interval and
                progress < 0.99 and
                abs(progress - last_progress) < self.min_progress_change):
                return

            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
            progress = max(0.0, min(1.0, float(progress)))
            bar_length = 10
            filled = int(progress * bar_length)
            bar = 'üü™' * filled + '‚¨ú' * (bar_length - filled)
            percent = int(progress * 100)

            # –†–∞–∑–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —ç—Ç–∞–ø–æ–≤
            if progress < 0.3:
                emoji = "üì•"
                text = f"{emoji} –°–∫–∞—á–∏–≤–∞–Ω–∏–µ...\n{bar} {percent}%"
            elif progress < 0.7:
                emoji = "‚öôÔ∏è"
                text = f"{emoji} –û–±—Ä–∞–±–æ—Ç–∫–∞...\n{bar} {percent}%"
            else:
                emoji = "üìä"
                text = f"{emoji} –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...\n{bar} {percent}%"

            try:
                await message.edit(text)
                self.last_update_times[message_id] = current_time
                self.last_progress_values[message_id] = progress
            except FloodWaitError as e:
                logger.warning(f"FloodWait: –∂–¥–µ–º {e.seconds} —Å–µ–∫—É–Ω–¥")
                await asyncio.sleep(e.seconds)
            except Exception as e:
                if "not modified" not in str(e):
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å: {str(e)}")
        except Exception as e:
            if "not modified" not in str(e):
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å: {str(e)}")


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
progress_manager = ProgressManager()


def get_string(key: str, lang: str = 'ru', **kwargs) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –ø–æ –∫–ª—é—á—É"""
    lang_dict = locales.get(lang, locales['ru'])
    text = lang_dict.get(key, key)
    if kwargs:
        return text.format(**kwargs)
    return text


def save_text_to_pdf(text: str, output_path: str):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç –≤ PDF —Ñ–∞–π–ª"""
    doc = SimpleDocTemplate(output_path, pagesize=A4,
                            rightMargin=50, leftMargin=50,
                            topMargin=50, bottomMargin=50)

    styles = getSampleStyleSheet()
    style = styles['Normal']
    style.fontName = 'DejaVu' if 'DejaVu' in pdfmetrics.getRegisteredFontNames() else 'Helvetica'
    style.fontSize = 12
    style.leading = 15

    paragraphs = [Paragraph(p.replace('\n', '<br />'), style) for p in text.split('\n\n')]
    elems = []
    for p in paragraphs:
        elems.append(p)
        elems.append(Spacer(1, 12))

    doc.build(elems)


class AudioProcessor:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤"""

    @staticmethod
    def split_audio(input_path: str, segment_time: int = SEGMENT_DURATION) -> list[str]:
        """–†–∞–∑–±–∏–≤–∞–µ—Ç –∞—É–¥–∏–æ –Ω–∞ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã"""
        output_dir = tempfile.mkdtemp(prefix="fragments_")
        output_pattern = os.path.join(output_dir, "fragment_%03d.mp3")

        ffmpeg_path = os.path.join(FFMPEG_DIR, "ffmpeg.exe")
        command = [
            ffmpeg_path,
            "-i", input_path,
            "-f", "segment",
            "-segment_time", str(segment_time),
            "-c", "copy",
            output_pattern
        ]

        try:
            subprocess.run(command, check=True, capture_output=True, text=True)
            return sorted([
                os.path.join(output_dir, f)
                for f in os.listdir(output_dir)
                if f.startswith("fragment_") and f.endswith(".mp3")
            ])
        except subprocess.CalledProcessError as e:
            logger.error(f"FFmpeg error: {e.stderr}")
            raise RuntimeError("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏ –∞—É–¥–∏–æ") from e

    @staticmethod
    def cleanup(files: list[str]):
        """–£–¥–∞–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""
        for path in files:
            try:
                if os.path.isfile(path):
                    os.remove(path)
                elif os.path.isdir(path):
                    for f in os.listdir(path):
                        os.remove(os.path.join(path, f))
                    os.rmdir(path)
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {path}: {e}")


async def upload_to_assemblyai(file_path: str) -> str:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –≤ AssemblyAI –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL"""
    try:
        async with httpx.AsyncClient() as client:
            with open(file_path, "rb") as f:
                response = await client.post(
                    f"{ASSEMBLYAI_BASE_URL}/upload",
                    headers=HEADERS,
                    files={"file": f},
                    timeout=API_TIMEOUT
                )
            response.raise_for_status()
            return response.json()["upload_url"]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")
        raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä AssemblyAI") from e


async def transcribe_with_assemblyai(audio_url: str) -> dict:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –≤ AssemblyAI –∏ –∂–¥—ë—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    headers = {
        "authorization": ASSEMBLYAI_API_KEY,
        "content-type": "application/json"
    }
    payload = {
        "audio_url": audio_url,
        "speaker_labels": True,
        "language_detection": True,
        "punctuate": True,
        "format_text": True
    }

    async with httpx.AsyncClient() as client:
        resp = await client.post(
            "https://api.assemblyai.com/v2/transcript",
            headers=headers, json=payload
        )
        resp.raise_for_status()
        transcript_id = resp.json()["id"]

        while True:
            status = await client.get(
                f"https://api.assemblyai.com/v2/transcript/{transcript_id}",
                headers=headers
            )
            result = status.json()
            if result["status"] == "completed":
                return result
            elif result["status"] == "error":
                raise Exception(result["error"])
            await asyncio.sleep(3)


async def download_youtube_audio(url: str, progress_callback: callable = None) -> str:
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –∞—É–¥–∏–æ —Å YouTube"""
    loop = asyncio.get_running_loop()
    progress_queue = asyncio.Queue()
    last_percent = -1  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞

    def progress_hook(data):
        if data['status'] == 'downloading' and progress_callback:
            try:
                percent_str = data.get('_percent_str', '0%')
                percent_value = float(percent_str.strip().replace('%', ''))
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ
                if abs(percent_value - last_percent) >= 5:  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 5%
                    loop.call_soon_threadsafe(progress_queue.put_nowait, percent_value)
            except:
                pass

    def sync_download():
        temp_dir = tempfile.gettempdir()
        unique_id = str(uuid.uuid4())
        outtmpl = os.path.join(temp_dir, f"{unique_id}")

        ydl_opts = {
            "format": "bestaudio/best",
            "outtmpl": outtmpl,
            "ffmpeg_location": FFMPEG_DIR,
            "progress_hooks": [progress_hook],
            "postprocessors": [{
                "key": "FFmpegExtractAudio",
                "preferredcodec": "mp3",
            }],
            "quiet": True,
            "no_warnings": False,
            "extract_flat": False,
            "http_headers": {
                "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
            },
        }

        try:
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                ydl.download([url])
                expected_filename = f"{outtmpl}.mp3"
                if os.path.exists(expected_filename):
                    return expected_filename
                else:
                    for file in os.listdir(temp_dir):
                        if file.startswith(os.path.basename(unique_id)):
                            return os.path.join(temp_dir, file)
                    raise FileNotFoundError(f"–°–∫–∞—á–∞–Ω–Ω—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {expected_filename}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è YouTube: {str(e)}")
            raise RuntimeError(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ: {str(e)}") from e

    async def process_progress():
        while True:
            try:
                data = await asyncio.wait_for(progress_queue.get(), timeout=1.0)
                if progress_callback:
                    await progress_callback(data)
            except asyncio.TimeoutError:
                if download_task.done():
                    break
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {str(e)}")
                break

    download_task = loop.run_in_executor(None, sync_download)
    progress_task = asyncio.create_task(process_progress())

    try:
        result = await download_task
        return result
    finally:
        progress_task.cancel()
        try:
            await progress_task
        except asyncio.CancelledError:
            pass


def format_results_with_speakers(segments: list[dict]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Å–ø–∏–∫–µ—Ä–æ–≤"""
    return "\n\n".join(
        f"–°–ø–∏–∫–µ—Ä {seg['speaker']}:\n{seg['text']}"
        for seg in segments
    )


def format_results_plain(segments: list[dict]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–µ–∑ —Å–ø–∏–∫–µ—Ä–æ–≤"""
    return "\n\n".join(seg["text"] for seg in segments)


def generate_summary_timecodes(segments: list[dict]) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–∞–π–º-–∫–æ–¥—ã —Å –ø–æ–º–æ—â—å—é AI"""
    url = "https://openrouter.ai/api/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json"
    }

    full_text_with_timestamps = ""
    for i, seg in enumerate(segments):
        start_minute = i * SEGMENT_DURATION // 60
        start_second = i * SEGMENT_DURATION % 60
        start_code = f"{start_minute:02}:{start_second:02}"
        full_text_with_timestamps += f"[{start_code}] {seg['text']}\n\n"

    prompt = f"""
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–æ–ª–Ω—É—é —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É –∞—É–¥–∏–æ —Å —Ç–∞–π–º-–∫–æ–¥–∞–º–∏ –∏ —Å–æ–∑–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–≥–ª–∞–≤–ª–µ–Ω–∏–µ.

–¢–µ–∫—Å—Ç —Å —Ç–∞–π–º-–∫–æ–¥–∞–º–∏:
{full_text_with_timestamps}

–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:
1. –í—ã–¥–µ–ª–∏ –û–°–ù–û–í–ù–´–ï —Å–º—ã—Å–ª–æ–≤—ã–µ –±–ª–æ–∫–∏ –∏ —Ç–µ–º—ã
2. –ì—Ä—É–ø–ø–∏—Ä—É–π –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –≤ –æ–¥–∏–Ω –ª–æ–≥–∏—á–µ—Å–∫–∏–π –±–ª–æ–∫
3. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –±–ª–æ–∫–∞ —É–∫–∞–∂–∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
4. –î–∞–π –µ–º–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –±–ª–æ–∫–∞
5. –°–æ—Ö—Ä–∞–Ω—è–π —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—è–¥–æ–∫

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
–¢–∞–π–º-–∫–æ–¥—ã

MM:SS - [–û—Å–Ω–æ–≤–Ω–∞—è —Ç–µ–º–∞/—Å–æ–±—ã—Ç–∏–µ]
[–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏]

MM:SS - [–°–ª–µ–¥—É—é—â–∞—è –æ—Å–Ω–æ–≤–Ω–∞—è —Ç–µ–º–∞]
...
"""

    data = {
        "model": "z-ai/glm-4.5-air:free",
        "messages": [{"role": "user", "content": prompt}],
        "temperature": 0.2
    }

    try:
        response = requests.post(url, headers=headers, data=json.dumps(data), timeout=60)
        response.raise_for_status()
        return response.json()['choices'][0]['message']['content'].strip()
    except Exception:
        fallback_result = "–¢–∞–π–º-–∫–æ–¥—ã\n\n"
        for i, seg in enumerate(segments):
            start_minute = i * SEGMENT_DURATION // 60
            start_second = i * SEGMENT_DURATION % 60
            start_code = f"{start_minute:02}:{start_second:02}"
            fallback_result += f"{start_code} - {seg['text'][:50]}...\n"
        return fallback_result


async def convert_to_mp3(input_path: str) -> str:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª –≤ MP3 —Ñ–æ—Ä–º–∞—Ç"""
    output_path = tempfile.NamedTemporaryFile(delete=False, suffix=".mp3").name

    ffmpeg_path = os.path.join(FFMPEG_DIR, "ffmpeg.exe")
    command = [
        ffmpeg_path,
        "-i", input_path,
        "-acodec", "libmp3lame",
        "-q:a", "2",
        "-y",
        output_path
    ]

    try:
        process = await asyncio.create_subprocess_exec(
            *command,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )
        await process.communicate()

        if process.returncode != 0:
            raise RuntimeError(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞: {input_path}")

        return output_path
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {str(e)}")
        return input_path


async def process_audio_file(file_path: str, progress_callback=None) -> list[dict]:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª"""
    try:
        if progress_callback:
            await progress_callback(0.01, "–ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª –≤ AssemblyAI...")

        audio_url = await upload_to_assemblyai(file_path)

        if progress_callback:
            await progress_callback(0.30, "–ó–∞–ø—É—Å–∫–∞—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é...")

        result = await transcribe_with_assemblyai(audio_url)

        if progress_callback:
            await progress_callback(0.90, "–§–æ—Ä–º–∏—Ä—É—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...")

        segments = []
        if "utterances" in result and result["utterances"]:
            for utt in result["utterances"]:
                segments.append({
                    "speaker": utt.get("speaker", "?"),
                    "text": (utt.get("text") or "").strip()
                })
        elif "text" in result:
            segments.append({"speaker": "?", "text": (result["text"] or "").strip()})

        if progress_callback:
            await progress_callback(1.0, "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

        return segments
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_audio_file: {e}")
        return []


THUMBNAIL_CACHE = {}


def create_custom_thumbnail(thumbnail_path: str = None):
    """–°–æ–∑–¥–∞–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—É—é –∏–∫–æ–Ω–∫—É –¥–ª—è PDF —Ñ–∞–π–ª–∞ —Å –≤—ã—Å–æ–∫–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º"""
    cache_key = thumbnail_path or "default"

    if cache_key in THUMBNAIL_CACHE:
        thumbnail_bytes = io.BytesIO(THUMBNAIL_CACHE[cache_key])
        thumbnail_bytes.seek(0)
        return thumbnail_bytes

    try:
        if thumbnail_path and os.path.exists(thumbnail_path):
            with Image.open(thumbnail_path) as img:
                if img.mode == 'RGBA':
                    background = Image.new('RGB', img.size, (255, 255, 255))
                    background.paste(img, mask=img.split()[3])
                    img = background

                target_size = (320, 320)
                img.thumbnail(target_size, Image.LANCZOS)

                square_img = Image.new('RGB', target_size, (255, 255, 255))
                x_offset = (target_size[0] - img.width) // 2
                y_offset = (target_size[1] - img.height) // 2
                square_img.paste(img, (x_offset, y_offset))

                thumbnail_bytes = io.BytesIO()
                square_img.save(thumbnail_bytes, format='JPEG', quality=95, optimize=True)
                thumbnail_bytes.seek(0)

                THUMBNAIL_CACHE[cache_key] = thumbnail_bytes.getvalue()
                thumbnail_bytes.seek(0)
                return thumbnail_bytes
        else:
            target_size = (320, 320)
            img = Image.new('RGB', target_size, color=(230, 50, 50))
            draw = ImageDraw.Draw(img)

            margin = 10
            draw.rectangle([margin, margin, target_size[0] - margin, target_size[1] - margin],
                           outline=(255, 255, 255), width=4)

            try:
                font = ImageFont.truetype("arial.ttf", 80)
            except:
                font = ImageFont.load_default()

            text = "PDF"
            bbox = draw.textbbox((0, 0), text, font=font)
            text_width = bbox[2] - bbox[0]
            text_height = bbox[3] - bbox[1]
            x = (target_size[0] - text_width) // 2
            y = (target_size[1] - text_height) // 2

            draw.text((x, y), text, fill=(255, 255, 255), font=font)

            thumbnail_bytes = io.BytesIO()
            img.save(thumbnail_bytes, format='JPEG', quality=95, optimize=True)
            thumbnail_bytes.seek(0)

            THUMBNAIL_CACHE[cache_key] = thumbnail_bytes.getvalue()
            thumbnail_bytes.seek(0)
            return thumbnail_bytes

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è thumbnail: {e}")
        return None


async def handle_message(event, client):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        lang = 'ru'
        message = event.message
        chat_id = message.chat_id

        EMOJI = {
            'downloading': 'üì•',
            'processing': '‚öôÔ∏è',
            'success': '‚úÖ',
            'error': '‚ùå',
            'file': 'üìÑ',
            'speakers': 'üë•',
            'text': 'üìù',
            'timecodes': '‚è±Ô∏è'
        }

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
        progress_message = await client.send_message(
            chat_id,
            f"{EMOJI['processing']} –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...\n‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú 0%"
        )

        if message.text and message.text.startswith(('http://', 'https://')):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ YouTube —Å—Å—ã–ª–∫–∏
            url = message.text.strip()

            async def download_progress(percent_value):
                try:
                    progress = percent_value / 100.0
                    await progress_manager.update_progress(progress, progress_message, lang)
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")

            audio_path = await download_youtube_audio(url, progress_callback=download_progress)

        elif message.media:
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            temp_path = tempfile.NamedTemporaryFile(delete=False, suffix=".temp").name
            await message.download_media(file=temp_path)

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if hasattr(message.media, 'document') or hasattr(message.media, 'audio'):
                audio_path = await convert_to_mp3(temp_path)
                os.remove(temp_path)
            else:
                audio_path = temp_path

        else:
            await progress_message.edit(f"{EMOJI['error']} {get_string('invalid_link', lang)}")
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        async def update_audio_progress(progress, status_text=None):
            if isinstance(progress, (int, float)):
                await progress_manager.update_progress(progress, progress_message, lang)
            elif status_text:
                await progress_message.edit(f"{EMOJI['processing']} {status_text}")

        results = await process_audio_file(audio_path, progress_callback=update_audio_progress)

        if not results or not any(seg.get('text') for seg in results):
            await progress_message.edit(f"{EMOJI['error']} {get_string('no_speech', lang)}")
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            try:
                os.remove(audio_path)
            except:
                pass
            return

        # –°–æ–∑–¥–∞–µ–º PDF —Ñ–∞–π–ª—ã
        text_with_speakers = format_results_with_speakers(results)
        text_plain = format_results_plain(results)
        timecodes_text = generate_summary_timecodes(results)

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è PDF
        pdf_files = []
        try:
            for i, (content, filename) in enumerate([
                (text_with_speakers, "üë• –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Å–æ —Å–ø–∏–∫–µ—Ä–∞–º–∏.pdf"),
                (text_plain, "üìù –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –±–µ–∑ —Å–ø–∏–∫–µ—Ä–æ–≤.pdf"),
                (timecodes_text, "‚è±Ô∏è –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç —Å —Ç–∞–π–º-–∫–æ–¥–∞–º–∏.pdf")
            ]):
                if content.strip():
                    temp_pdf = tempfile.NamedTemporaryFile(delete=False, suffix=".pdf")
                    temp_pdf.close()
                    save_text_to_pdf(content, temp_pdf.name)
                    pdf_files.append((temp_pdf.name, filename))

            # –°–æ–∑–¥–∞–µ–º thumbnail
            thumbnail_bytes = create_custom_thumbnail(CUSTOM_THUMBNAIL_PATH)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF —Ñ–∞–π–ª—ã
            for pdf_path, filename in pdf_files:
                try:
                    await client.send_file(
                        chat_id,
                        pdf_path,
                        caption=filename.replace(".pdf", ""),
                        attributes=[DocumentAttributeFilename(filename)],
                        thumb=thumbnail_bytes if thumbnail_bytes else None,
                        force_document=True
                    )
                    if thumbnail_bytes:
                        thumbnail_bytes.seek(0)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ {pdf_path}: {e}")
                    # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ thumbnail
                    await client.send_file(
                        chat_id,
                        pdf_path,
                        caption=filename.replace(".pdf", ""),
                        attributes=[DocumentAttributeFilename(filename)],
                        force_document=True
                    )

        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            try:
                os.remove(audio_path)
            except:
                pass

            for pdf_path, _ in pdf_files:
                try:
                    os.remove(pdf_path)
                except:
                    pass

        await progress_message.edit(
            f"{EMOJI['success']} –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
            f"–í—Å–µ —Ñ–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã"
        )

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
        error_text = f"{EMOJI['error']} –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:\n{str(e)}"
        try:
            await progress_message.edit(error_text)
        except:
            await client.send_message(chat_id, error_text)


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    client = TelegramClient(
        TELEGRAM_SESSION_NAME,
        int(TELEGRAM_API_ID),
        TELEGRAM_API_HASH
    )

    await client.start(
        phone=lambda: "+79254499550",
        code_callback=lambda: input("Please enter the code you received: "),
        password=lambda: getpass("Two-factor password: ") if input("Is 2FA enabled? (y/n): ").lower() == 'y' else None
    )

    print("–ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞...")
    print("Userbot —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")

    @client.on(events.NewMessage())
    async def universal_handler(event):
        message = event.message

        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–æ–º–∞–Ω–¥—ã
        if message.text and message.text.startswith('/'):
            return

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if (message.text and message.text.startswith(('http://', 'https://'))) or message.media:
            await handle_message(event, client)

    @client.on(events.NewMessage(pattern='/start'))
    async def start_handler(event):
        welcome_text = (
            "üéôÔ∏è *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Transcribe To!*\n\n"
            "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –∞—É–¥–∏–æ –∏ –≤–∏–¥–µ–æ –≤ —Ç–µ–∫—Å—Ç:\n\n"
            "‚Ä¢ üéµ –ê—É–¥–∏–æ—Ñ–∞–π–ª—ã –ª—é–±–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞\n"
            "‚Ä¢ üì∫ YouTube –≤–∏–¥–µ–æ –ø–æ —Å—Å—ã–ª–∫–µ\n"
            "‚Ä¢ üë• –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö —Å–ø–∏–∫–µ—Ä–æ–≤\n"
            "‚Ä¢ ‚è±Ô∏è –¢–∞–π–º-–∫–æ–¥—ã –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ\n\n"
            "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube!"
        )
        await event.reply(welcome_text, parse_mode='markdown')

    logger.info("Userbot –∑–∞–ø—É—â–µ–Ω")
    await client.run_until_disconnected()


if __name__ == "__main__":
    asyncio.run(main())