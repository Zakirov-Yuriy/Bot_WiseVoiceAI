import logging
import os
import tempfile
import time
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, CommandStart
from aiogram.types import FSInputFile, BufferedInputFile
from aiogram.exceptions import TelegramBadRequest

from . import database as db
from . import services
from . import ui
from .config import (
    YOOMONEY_WALLET, YOOMONEY_REDIRECT_URI, SUBSCRIPTION_AMOUNT,
    SUBSCRIPTION_DURATION_DAYS, PAID_USER_FILE_LIMIT, FREE_USER_FILE_LIMIT,
    SUPPORTED_FORMATS, CUSTOM_THUMBNAIL_PATH, BASE_DIR
)
from .localization import get_string

logger = logging.getLogger(__name__)

# --- Handler Functions ---

async def start_handler(message: types.Message, bot: Bot):
    user_id = message.from_user.id
    text = message.text
    referrer_id = None

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
    if text and '?' in text:
        parts = text.split('?')
        if len(parts) > 1:
            query_params = parts[1].split('&')
            for param in query_params:
                if param.startswith('start=ref_'):
                    try:
                        referrer_id = int(param.split('_')[1])
                        await db.update_user_referrer(user_id, referrer_id)
                        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–∏—à–µ–ª –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –æ—Ç {referrer_id}")
                        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω
                        user_data = await db.get_user_data(user_id)
                        if not user_data or not user_data.get("referral_code"):
                            await db.generate_and_set_referral_code(user_id)
                        break
                    except (ValueError, IndexError) as e:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É: {param}. –û—à–∏–±–∫–∞: {e}")

    welcome_text = (
        "üéâ *–ü—Ä–∏–≤–µ—Ç!*\n\n"
        "–£ –≤–∞—Å –µ—Å—Ç—å *2 –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏* –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–µ—Ä–≤–∏—Å.\n\n"
        "‚ö°Ô∏è –ï—Å–ª–∏ –≤–∞—à —Ñ–∞–π–ª –≤–µ—Å–∏—Ç –±–æ–ª—å—à–µ *20 –ú–ë* ‚Äî –∑–∞–≥—Ä—É–∑–∏—Ç–µ –µ–≥–æ –≤ –æ–¥–Ω–æ –∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –æ–±–ª–∞—á–Ω—ã—Ö —Ö—Ä–∞–Ω–∏–ª–∏—â –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É:\n\n"
        "‚Ä¢ [Dropbox](https://www.dropbox.com/)\n"
        "‚Ä¢ [Google Drive](https://drive.google.com/)\n"
        "‚Ä¢ [OneDrive](https://onedrive.live.com/)\n\n"
        "üëâ –í–∞–∂–Ω–æ:\n"
        "‚Ä¢ –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å *–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –≤—Å–µ—Ö*.\n"
        "‚Ä¢ –†–∞–∑–º–µ—Ä –Ω–µ –±–æ–ª—å—à–µ *5 –ì–ë*.\n\n"
        "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É, –∏ —è –≤—Å–µ —Å–¥–µ–ª–∞—é –∑–∞ –≤–∞—Å üôå"
    )
    await message.answer(welcome_text, reply_markup=ui.create_menu_keyboard(), parse_mode='Markdown')
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è user_id {user_id}")

async def subscription_handler(message: types.Message):
    user_id = message.from_user.id
    description = f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ Transcribe To –Ω–∞ {SUBSCRIPTION_DURATION_DAYS} –¥–Ω–µ–π"
    
    payment_url, payment_label = await services.create_yoomoney_payment(
        user_id=user_id,
        amount=SUBSCRIPTION_AMOUNT,
        description=description
    )

    if payment_url:
        await message.answer(
            f"üí≥ –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n[–û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É]({payment_url})\n"
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {SUBSCRIPTION_AMOUNT} —Ä—É–±. –Ω–∞ {SUBSCRIPTION_DURATION_DAYS} –¥–Ω–µ–π.\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
            reply_markup=ui.create_menu_keyboard(),
            parse_mode='Markdown'
        )
        logger.info(f"–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–ª—è user_id {user_id}: {payment_label}")
        
        # --- –õ–æ–≥–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ ---
        user_data = await db.get_user_data(user_id)
        if user_data and user_data.get("referrer_id"):
            referrer_id = user_data["referrer_id"]
            # –ù–∞—á–∏—Å–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä—É –Ω–µ–¥–µ–ª—é –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            await db.add_free_weeks_to_referrer(referrer_id, weeks_to_add=1)
            logger.info(f"–†–µ—Ñ–µ—Ä–µ—Ä—É {referrer_id} –¥–æ–±–∞–≤–ª–µ–Ω–∞ 1 –Ω–µ–¥–µ–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —É–≤–µ–¥–æ–º–∏—Ç—å —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –±–æ–Ω—É—Å–∞
            # try:
            #     await bot.send_message(referrer_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ñ–æ—Ä–º–∏–ª –ø–æ–¥–ø–∏—Å–∫—É! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–∞ 1 –Ω–µ–¥–µ–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.")
            # except Exception as e:
            #     logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ {referrer_id}: {e}")

    else:
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=ui.create_menu_keyboard()
        )

async def menu_handler(message: types.Message):
    await message.answer(get_string('menu', 'ru'), reply_markup=ui.create_menu_keyboard(), parse_mode='Markdown')
    logger.info(f"–ú–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è user_id {message.from_user.id}")

async def settings_cmd(message: types.Message):
    await message.answer(
        get_string('settings_choose', 'ru'),
        reply_markup=ui.create_settings_keyboard(message.from_user.id)
    )

async def referral_cmd(message: types.Message):
    user_id = message.from_user.id
    user_data = await db.get_user_data(user_id)

    if not user_data:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    referral_code = user_data.get("referral_code")
    if not referral_code:
        referral_code = await db.generate_and_set_referral_code(user_id)
        if not referral_code:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥.")
            return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    bot_username = "@Transcribe_to_bot" # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–µ –∏–º—è –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
    referral_link = f"https://t.me/{bot_username}?start=ref_{user_id}"
    
    # –ü—Ä–∏–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    referral_message_template = (
        "‚ú® –í—ã –ø—Ä–∏–≥–ª–∞—à–µ–Ω—ã –≤ Transcribe To ‚Äî –±–æ—Ç–∞ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∏ —Ç–æ—á–Ω–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∞—É–¥–∏–æ –∏ –≤–∏–¥–µ–æ –≤ —Ç–µ–∫—Å—Ç!\n\n"
        "üéÅ –ó–∞–±–∏—Ä–∞–π—Ç–µ 2 –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å üëá\n\n"
        f"Telegram: {bot_username}\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ –∏–ª–∏ –≤–∏–¥–µ–æ ‚Äî –∏ –ø–æ–ª—É—á–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å —Ç–∞–π–º-–∫–æ–¥–∞–º–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–Ω—ã—Ö —Å–ø–∏–∫–µ—Ä–æ–≤ üôå\n\n"
        "--- –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: {referral_code} ---\n"
        "--- –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {referral_link} ---"
    )
    
    await message.answer(
        referral_message_template.format(referral_code=referral_code, referral_link=referral_link),
        reply_markup=ui.create_referral_keyboard(referral_link), # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Ç–∞–∫–∞—è –∫–Ω–æ–ø–∫–∞ –µ—Å—Ç—å –≤ ui.py
        parse_mode='Markdown'
    )
    logger.info(f"–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–ª—è user_id {user_id}")


async def support_cmd(message: types.Message):
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º: @Zak_Yuri")

async def callback_handler(callback: types.CallbackQuery, bot: Bot):
    user_id = callback.from_user.id
    data = callback.data
    logger.info(f"Callback –æ—Ç user_id {user_id}: {data}")

    if data == 'subscribe':
        await subscription_handler(callback.message)
        await callback.answer()

    elif data == 'settings':
        ui.ensure_user_settings(user_id)
        await callback.message.answer(get_string('settings_choose', 'ru'), reply_markup=ui.create_settings_keyboard(user_id))

    elif data in ['set_format_google', 'set_format_word', 'set_format_pdf', 'set_format_txt', 'set_format_md']:
        ui.ensure_user_settings(user_id)
        new_fmt = {
            'set_format_google': 'google',
            'set_format_word': 'word',
            'set_format_pdf': 'pdf',
            'set_format_txt': 'txt',
            'set_format_md': 'md'
        }[data]
        ui.user_settings[user_id]['format'] = new_fmt
        try:
            await callback.message.edit_text(get_string('settings_choose', 'ru'), reply_markup=ui.create_settings_keyboard(user_id))
        except Exception:
            await callback.message.answer(get_string('settings_choose', 'ru'), reply_markup=ui.create_settings_keyboard(user_id))

    elif data == 'settings_back':
        try:
            await callback.message.edit_text(get_string('menu', 'ru'), reply_markup=ui.create_menu_keyboard())
        except Exception:
            await callback.message.answer(get_string('menu', 'ru'), reply_markup=ui.create_menu_keyboard())

    elif data in ['select_speakers', 'select_plain', 'select_timecodes']:
        if user_id not in ui.user_selections:
            await callback.answer("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube.")
            return
        selections = ui.user_selections[user_id]
        if data == 'select_speakers':
            selections['speakers'] = not selections['speakers']
        elif data == 'select_plain':
            selections['plain'] = not selections['plain']
        elif data == 'select_timecodes':
            selections['timecodes'] = not selections['timecodes']
        try:
            await callback.message.edit_text(
                get_string('select_transcription', 'ru'),
                reply_markup=ui.create_transcription_selection_keyboard(user_id)
            )
        except TelegramBadRequest as e:
            if "message is not modified" not in str(e):
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {str(e)}")

    elif data == 'confirm_selection':
        if user_id not in ui.user_selections:
            await callback.answer("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube.")
            return
        selections = ui.user_selections[user_id]
        if not any([selections['speakers'], selections['plain'], selections['timecodes']]):
            await callback.message.edit_text(
                f"‚ùå {get_string('no_selection', 'ru')}",
                reply_markup=ui.create_transcription_selection_keyboard(user_id)
            )
            return
        audio_path = selections.get('file_path')
        if not audio_path:
            await callback.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –∏–ª–∏ —Å—Å—ã–ª–∫—É —Å–Ω–æ–≤–∞.",
                reply_markup=ui.create_menu_keyboard()
            )
            if user_id in ui.user_selections:
                del ui.user_selections[user_id]
            return
        try:
            await callback.message.delete()
            await process_audio_file_for_user(bot, callback.message, user_id, selections, audio_path)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è user_id {user_id}: {str(e)}")
            await callback.message.edit_text(f"‚ùå {get_string('error', 'ru', error=str(e))}")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–Ω–æ–ø–∫–∞ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ")
    elif data == 'send_referral_invitation':
        user_data = await db.get_user_data(user_id)
        if not user_data:
            await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            await callback.answer()
            return

        referral_code = user_data.get("referral_code")
        if not referral_code:
            referral_code = await db.generate_and_set_referral_code(user_id)
            if not referral_code:
                await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥.")
                await callback.answer()
                return
        
        bot_username = "@Transcribe_to_bot" # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–µ –∏–º—è –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
        referral_link = f"https://t.me/{bot_username}?start=ref_{user_id}"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Ç–æ–ª—å–∫–æ —á—Ç–æ
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –≤ db.py –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è update_user_referral_link(user_id, referral_link)
        # –ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –Ω—É–∂–Ω–æ –µ–µ –¥–æ–±–∞–≤–∏—Ç—å. –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Å—ã–ª–∫—É.
        # await db.update_user_referral_link(user_id, referral_link) 

        if referral_link:
            await callback.message.answer(
                f"‚ú® –í–æ—Ç –≤–∞—à–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ:\n\n"
                f"üéÅ –ó–∞–±–∏—Ä–∞–π—Ç–µ 2 –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å üëá\n\n"
                f"Telegram: @Transcribe_to_bot\n\n"
                f"–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ –∏–ª–∏ –≤–∏–¥–µ–æ ‚Äî –∏ –ø–æ–ª—É—á–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å —Ç–∞–π–º-–∫–æ–¥–∞–º–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–Ω—ã—Ö —Å–ø–∏–∫–µ—Ä–æ–≤ üôå\n\n"
                f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {referral_link}",
                reply_markup=ui.create_menu_keyboard(), # –ò–ª–∏ –¥—Ä—É–≥–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                parse_mode='Markdown'
            )
        else:
            await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É.")
        await callback.answer()


    try:
        await callback.answer()
    except TelegramBadRequest:
        pass

async def universal_handler(message: types.Message, bot: Bot):
    user_id = message.from_user.id
    if message.text and message.text.startswith('/'):
        return

    if not ((message.text and message.text.startswith(('http://', 'https://'))) or message.audio or message.document):
        return

    can_use, is_paid = await db.check_user_trials(user_id)
    if not can_use:
        await message.answer(f"‚ùå {get_string('no_trials', 'ru')}", reply_markup=ui.create_menu_keyboard())
        return

    file_limit = PAID_USER_FILE_LIMIT if is_paid else FREE_USER_FILE_LIMIT
    if message.audio or message.document:
        file_size = (message.audio.file_size if message.audio else message.document.file_size)
        if file_size > file_limit:
            await message.answer(f"‚ùå {get_string('file_too_large', 'ru', size=file_size, limit=file_limit)}", reply_markup=ui.create_menu_keyboard())
            return

    audio_path = None
    try:
        ui.ensure_user_settings(user_id)

        if message.text and message.text.startswith(('http://', 'https://')):
            url = message.text.strip()
            logger.info(f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ YouTube: {url}")

            async def download_progress(percent_value):
                try:
                    progress = percent_value / 100.0
                    await ui.progress_manager.update_progress(progress, temp_message, 'ru')
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")

            temp_message = await message.answer(f"üì• –ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ...\n‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú 0%")
            audio_path = await services.download_youtube_audio(url, progress_callback=download_progress)
            await temp_message.delete()
        else:
            file = message.audio or message.document
            temp_path = tempfile.NamedTemporaryFile(delete=False, suffix=".temp").name
            await bot.download(file, destination=temp_path)
            audio_path = await services.convert_to_mp3(temp_path)
            try:
                os.remove(temp_path)
            except:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {temp_path}")

        ui.user_selections[user_id] = {
            'speakers': False,
            'plain': False,
            'timecodes': False,
            'file_path': audio_path,
            'message_id': None
        }
        selection_message = await message.answer(
            get_string('select_transcription', 'ru'),
            reply_markup=ui.create_transcription_selection_keyboard(user_id)
        )
        ui.user_selections[user_id]['message_id'] = selection_message.message_id

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è user_id {user_id}: {str(e)}")
        await message.answer(f"‚ùå {get_string('error', 'ru', error=str(e))}")
        if audio_path:
            try:
                os.remove(audio_path)
            except:
                pass
        if user_id in ui.user_selections:
            del ui.user_selections[user_id]

async def process_audio_file_for_user(bot: Bot, message: types.Message, user_id: int, selections: dict, audio_path: str):
    lang = 'ru'
    chat_id = message.chat.id
    EMOJI = {
        'processing': '‚öôÔ∏è',
        'success': '‚úÖ',
        'error': '‚ùå',
        'speakers': 'üë•',
        'text': 'üìù',
        'timecodes': '‚è±Ô∏è'
    }

    ui.ensure_user_settings(user_id)
    chosen_format = ui.user_settings[user_id]['format']
    chosen_ext = SUPPORTED_FORMATS[chosen_format]['ext']

    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ –¥–ª—è user_id {user_id} —Å –≤—ã–±–æ—Ä–æ–º: {selections}, —Ñ–æ—Ä–º–∞—Ç: {chosen_format}")

    progress_message = await message.answer(f"{EMOJI['processing']} –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...\n‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú 0%")

    out_files = []
    try:
        async def update_audio_progress(progress, status_text=None):
            if isinstance(progress, (int, float)):
                if progress < 0.99:
                    await asyncio.sleep(5)
                await ui.progress_manager.update_progress(progress, progress_message, lang)
            elif status_text:
                await progress_message.edit_text(f"{EMOJI['processing']} {status_text}")

        results = await services.process_audio_file(audio_path, user_id, progress_callback=update_audio_progress)

        if not results or not any(seg.get('text') for seg in results):
            await progress_message.edit_text(f"{EMOJI['error']} {get_string('no_speech', lang)}")
            return

        def _save_with_format(text_data: str, base_name: str):
            temp_out = tempfile.NamedTemporaryFile(delete=False, suffix=chosen_ext).name
            if chosen_ext == ".pdf":
                services.save_text_to_pdf(text_data, temp_out)
            elif chosen_ext == ".docx":
                services.save_text_to_docx(text_data, temp_out)
            elif chosen_ext == ".txt":
                services.save_text_to_txt(text_data, temp_out)
            elif chosen_ext == ".md":
                services.save_text_to_md(text_data, temp_out)
            display_name = f"{base_name}{' (Google Docs)' if chosen_format=='google' else ''}{chosen_ext}"
            return temp_out, display_name

        if selections['speakers']:
            text_with_speakers = services.format_results_with_speakers(results)
            path, name = _save_with_format(text_with_speakers, f"{EMOJI['speakers']} –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Å–æ —Å–ø–∏–∫–µ—Ä–∞–º–∏")
            out_files.append((path, name))

        if selections['plain']:
            text_plain = services.format_results_plain(results)
            path, name = _save_with_format(text_plain, f"{EMOJI['text']} –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –±–µ–∑ —Å–ø–∏–∫–µ—Ä–æ–≤")
            out_files.append((path, name))

        if selections['timecodes']:
            timecodes_text = services.generate_summary_timecodes(results)
            path, name = _save_with_format(timecodes_text, f"{EMOJI['timecodes']} –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç —Å —Ç–∞–π–º-–∫–æ–¥–∞–º–∏")
            out_files.append((path, name))

        thumbnail_bytes = services.create_custom_thumbnail(CUSTOM_THUMBNAIL_PATH) if chosen_ext == '.pdf' else None
        thumbnail_file = BufferedInputFile(thumbnail_bytes.read(), filename="thumbnail.jpg") if thumbnail_bytes else None

        for file_path, filename in out_files:
            try:
                await bot.send_document(
                    chat_id,
                    document=FSInputFile(file_path, filename=filename),
                    caption=filename.replace(chosen_ext, ""),
                    thumbnail=thumbnail_file if chosen_ext == '.pdf' else None
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
                await bot.send_document(
                    chat_id,
                    document=FSInputFile(file_path, filename=filename),
                    caption=filename.replace(chosen_ext, "")
                )

        await progress_message.edit_text(
            f"{EMOJI['success']} {get_string('done')}\n–í—Å–µ —Ñ–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã",
            reply_markup=ui.create_menu_keyboard()
        )

        if not (await db.check_user_trials(user_id))[1]:
            await db.increment_trials(user_id)

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è user_id {user_id}: {str(e)}")
        await progress_message.edit_text(f"{EMOJI['error']} {get_string('error', lang, error=str(e))}")
    finally:
        if audio_path:
            try:
                os.remove(audio_path)
            except:
                pass
        for file_path, _ in out_files:
            try:
                os.remove(file_path)
            except:
                pass
        if user_id in ui.user_selections:
            del ui.user_selections[user_id]

# --- Registration Function ---

def register_handlers(dp: Dispatcher, bot: Bot):
    dp.message.register(start_handler, CommandStart())
    dp.message.register(subscription_handler, Command("subscription", "subscribe"))
    dp.message.register(menu_handler, Command("menu"))
    dp.message.register(settings_cmd, Command("settings"))
    dp.message.register(referral_cmd, Command("referral"))
    dp.message.register(support_cmd, Command("support"))
    dp.callback_query.register(callback_handler)
    dp.message.register(universal_handler)
